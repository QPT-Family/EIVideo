# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys, os
from PyQt5.QtMultimedia import QMediaContent
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtMultimedia import *

import cv2
from PaintBoard import PaintBoard

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1327, 871)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 20, 1271, 771))
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.cap = []

        self.all_frames = []

        self.fps = None
        self.timer = QTimer(self.frame)
        self.time_label = QLabel('--/--', self.frame)

        self.progress_slider = QSlider(self.frame)
        self.progress_slider.setEnabled(True)
        self.progress_slider.setOrientation(Qt.Horizontal)
        self.progress_slider.setFixedWidth(800)
        self.progress_slider.setFixedHeight(20)
        self.progress_slider.setSingleStep(1)  # 设置变化步长
        self.progress_slider.setValue(0)
        self.progress_slider.sliderReleased.connect(self.update_video_position_func)  # 拖拽进度条

        self.picturelabel = QtWidgets.QLabel(self.frame)
        self.picturelabel.setGeometry(50, 40, 911, 481)
        self.picturelabel.setText("")
        self.picturelabel.setObjectName("picturelabel")
        self.choosevideo_btn = QtWidgets.QPushButton(self.frame)
        self.choosevideo_btn.setGeometry(QtCore.QRect(950, 100, 75, 23))
        self.choosevideo_btn.setObjectName("choosevideo_btn")
        self.choosevideo_btn.clicked.connect(self.slotchoose)

        self.paintBoard = PaintBoard(self.frame)
        self.paintBoard.setGeometry(50, 40, 911, 481)

        self.cbtn_Eraser = QCheckBox("橡皮擦")
        self.cbtn_Eraser.setParent(self.frame)
        self.cbtn_Eraser.move(950, 40)
        self.cbtn_Eraser.clicked.connect(self.on_cbtn_Eraser_clicked)
        self.btn_Clear = QPushButton("清空画板")
        self.btn_Clear.setParent(self.frame)  # 设置父对象为本界面
        self.btn_Clear.move(950, 60)
        self.btn_Clear.clicked.connect(self.paintBoard.Clear)
        self.btn_Save = QPushButton("保存作品")
        self.btn_Save.setParent(self.frame)
        self.btn_Save.clicked.connect(self.on_btn_Save_Clicked)
        self.btn_Save.move(950,80)

        self.label_penColor = QLabel(self.frame)
        self.label_penColor.setText("画笔颜色")
        self.label_penColor.move(990, 100)
        # 获取颜色列表(字符串类型)
        self.colorList = QColor.colorNames()
        self.comboBox_penColor = QComboBox(self.frame)
        self.fillColorList(self.comboBox_penColor)  # 用各种颜色填充下拉列表
        self.comboBox_penColor.move(1080, 80)
        self.comboBox_penColor.currentIndexChanged.connect(
            self.on_PenColorChange)  # 关联下拉列表的当前索引变更信号与函数on_PenColorChange

        self.list_widget = QListWidget(self.frame)
        self.list_widget.setFixedWidth(300)
        self.list_widget.setFixedHeight(150)
        self.list_widget.move(950, 500)
        self.media_list = ['E:/PaddlePaddle_Project/EIVideo/example/example.mp4',
                           'E:/PaddlePaddle_Project/EIVideo/example/example1.mp4',
                           'E:/PaddlePaddle_Project/EIVideo/example/example2.mp4']
        self.list_widget.addItems([m.split('/')[-1] for m in self.media_list])


        self.widget2 = QtWidgets.QWidget(self.frame)
        self.widget2.setGeometry(QtCore.QRect(60, 620, 831, 25))
        self.widget2.setObjectName("widget2")
        self.barLayout = QtWidgets.QHBoxLayout(self.widget2)
        self.barLayout.setContentsMargins(0, 0, 0, 0)
        self.barLayout.setObjectName("barLayout")
        self.barLayout.addWidget(self.progress_slider)
        self.barLayout.addWidget(self.time_label)

        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(1030, 690, 191, 61))
        self.pushButton_6.setObjectName("pushButton_6")
        self.widget1 = QtWidgets.QWidget(self.frame)
        self.widget1.setGeometry(QtCore.QRect(60, 520, 831, 25))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget1)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.btn_func(self.pushButton))
        self.horizontalLayout.addWidget(self.pushButton)
        self.playbtn = QtWidgets.QPushButton(self.widget1)
        self.playbtn.setObjectName("playbtn")
        self.playbtn.clicked.connect(lambda: self.btn_func(self.playbtn))
        self.horizontalLayout.addWidget(self.playbtn)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.btn_func(self.pushButton_2))
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_3.clicked.connect(lambda: self.btn_func(self.pushButton_3))
        self.pushButton_4 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(lambda: self.btn_func(self.pushButton_4))
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_5.clicked.connect(lambda: self.btn_func(self.pushButton_5))
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.splitter = QtWidgets.QSplitter(self.frame)
        self.splitter.setGeometry(QtCore.QRect(71, 731, 851, 20))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.label = QtWidgets.QLabel(self.splitter)
        self.label.setObjectName("label")
        self.progressBar = QtWidgets.QProgressBar(self.splitter)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1327, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.list_widget.setCurrentRow(0)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_6.setText(_translate("MainWindow", "GO"))
        self.pushButton.setText(_translate("MainWindow", "Previous"))
        self.playbtn.setText(_translate("MainWindow", "Play"))
        self.pushButton_2.setText(_translate("MainWindow", "Stop"))
        self.pushButton_3.setText(_translate("MainWindow", "Next"))
        self.pushButton_4.setText(_translate("MainWindow", "Add"))
        self.pushButton_5.setText(_translate("MainWindow", "Delete"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.choosevideo_btn.setText(_translate("Form", "选择视频"))

    def btn_func(self, btn):
        if btn == self.pushButton:
            if self.playlist.currentIndex() == 0:
                self.playlist.setCurrentIndex(self.playlist.mediaCount() - 1)
                self.list_widget.setCurrentRow(self.playlist.mediaCount() - 1)
            else:
                self.playlist.previous()
                self.list_widget.setCurrentRow(self.playlist.currentIndex() - 1)

        elif btn == self.playbtn:
            self.timer_camera = QTimer()  # 定义定时器
            self.timer_camera.start(1000 / self.cap.get(cv2.CAP_PROP_FPS))
            self.timer_camera.timeout.connect(self.openFrame)

        elif btn == self.pushButton_2:
            self.slotStop()

        elif btn == self.pushButton_3:
            if self.playlist.currentIndex() == self.playlist.mediaCount() - 1:
                self.playlist.setCurrentIndex(0)
                self.list_widget.setCurrentRow(0)
            else:
                self.playlist.next()
                self.list_widget.setCurrentRow(self.playlist.currentIndex() + 1)

        elif btn == self.pushButton_4:
            urls = QFileDialog.getOpenFileUrls()[0]
            for url in urls:
                yu = url.toString()
                drv, left = os.path.split(yu)
                self.list_widget.addItem(left)
                content = QMediaContent(url)
                self.playlist.addMedia(content)
            num = self.playlist.mediaCount() - len(urls)
            self.playlist.setCurrentIndex(num)
            self.list_widget.setCurrentRow(num)
            self.player.play()


        elif btn == self.pushButton_5:
            pass

    def on_cbtn_Eraser_clicked(self):
        if self.cbtn_Eraser.isChecked():
            self.paintBoard.EraserMode = True  # 进入橡皮擦模式
        else:
            self.paintBoard.EraserMode = False  # 退出橡皮擦模式

    def on_btn_Save_Clicked(self):
        savePath = QFileDialog.getSaveFileName(self, 'Save Your Paint', '.\\', '*.png')
        print(savePath)
        if savePath[0] == "":
            print("Save cancel")
            return
        image = self.paintBoard.GetContentAsQImage()
        image.save(savePath[0])

    def fillColorList(self, comboBox):

        index_black = 0
        index = 0
        for color in self.colorList:
            if color == "black":
                index_black = index
            index += 1
            pix = QPixmap(70, 20)
            pix.fill(QColor(color))
            comboBox.addItem(QIcon(pix), None)
            comboBox.setIconSize(QSize(70, 20))
            comboBox.setSizeAdjustPolicy(QComboBox.AdjustToContents)

        comboBox.setCurrentIndex(index_black)

    def on_PenColorChange(self):
        color_index = self.comboBox_penColor.currentIndex()
        color_str = self.colorList[color_index]

        self.paintBoard.ChangePenColor(color_str)

    def update_video_position_func(self):
        self.sliderframenum = self.progress_slider.value()
        self.slotStop()

        print(self.sliderframenum)
        self.openFrame(by_Frame=True, framenum=self.sliderframenum)
        self.cap.set(cv2.CAP_PROP_POS_FRAMES, self.sliderframenum)
        self.progress_slider.setValue(self.sliderframenum)
        self.time_label.setText('{}/{}'.format(self.sliderframenum, self.cap.get(7)))
        print("update done")

    def slotchoose(self):
        self.videoName, _ = QFileDialog.getOpenFileName(self.frame, "Open", "", "*.mp4;;All Files(*)")
        if self.videoName != "":
            self.cap = cv2.VideoCapture(self.videoName)
            # 存所有frame
            self.saveTempFrame()
            print("save temp frame done")
            self.progress_slider.setRange(0, self.cap.get(cv2.CAP_PROP_FRAME_COUNT))

    def slotStart(self):
        self.timer_camera = QTimer()  # 定义定时器
        self.timer_camera.start(1000 / self.cap.get(cv2.CAP_PROP_FPS))
        self.timer_camera.timeout.connect(self.openFrame)

    def saveTempFrame(self):
        self.tmpcap = cv2.VideoCapture(self.videoName)
        while (True):
            ret, frame = self.tmpcap.read()

            if ret == True:
                self.all_frames.append(frame)
                cv2.waitKey(1)
            else:
                break
        self.slotStart()


    def slotStop(self):
        if self.cap != []:
            self.timer_camera.stop()  # 停止计时器
        else:
            Warming = QMessageBox.warning(self, "Warming", "Push the left upper corner button to Quit.",
                                          QMessageBox.Yes)

    def openFrame(self, by_Frame = False, framenum=None):
        if(by_Frame == False):
            if (self.cap.isOpened()):
                ret, self.frame = self.cap.read()
                if ret:
                    frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)

                    height, width, bytesPerComponent = frame.shape
                    bytesPerLine = bytesPerComponent * width
                    q_image = QImage(frame.data, width, height, bytesPerLine,
                                     QImage.Format_RGB888).scaled(self.picturelabel.width(), self.picturelabel.height())
                    self.picturelabel.clear()
                    self.picturelabel.setPixmap(QPixmap.fromImage(q_image))
                    self.progress_slider.setValue(self.cap.get(1))
                    self.time_label.setText('{}/{}'.format(self.cap.get(1), self.cap.get(7)))

                else:
                    self.cap.release()
                    self.timer_camera.stop()  # 停止计时器
        else:
            print("now openframe by num")

            self.frame = self.all_frames[framenum]
            frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
            print("read frame done")
            height, width, bytesPerComponent = frame.shape
            bytesPerLine = bytesPerComponent * width
            q_image = QImage(frame.data, width, height, bytesPerLine,
                             QImage.Format_RGB888).scaled(self.picturelabel.width(), self.picturelabel.height())
            self.picturelabel.setPixmap(QPixmap.fromImage(q_image))
            self.progress_slider.setValue(self.cap.get(1))
            self.time_label.setText('{}/{}'.format(self.cap.get(1), self.cap.get(7)))
            print("this set right")





from PyQt5.QtMultimediaWidgets import QVideoWidget
